package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	generated1 "app/graph/generated"
	"app/graph/model"
	models "app/models/generated"
	"context"
)

// SignUp is the resolver for the signUp field.
func (r *queryResolver) SignUp(ctx context.Context, input model.SignUpInput) (*models.User, error) {
	result := r.authService.SignUp(ctx, input)
	return &result.User, result.Error
}

// CreatedAt is the resolver for the createdAt field.
func (r *userResolver) CreatedAt(ctx context.Context, obj *models.User) (string, error) {
	return obj.CreatedAt.Format("2006-01-02 15:04:05"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *userResolver) UpdatedAt(ctx context.Context, obj *models.User) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02 15:04:05"), nil
}

// NameAndEmail is the resolver for the nameAndEmail field.
func (r *userResolver) NameAndEmail(ctx context.Context, obj *models.User) (string, error) {
	return obj.Name + "_" + obj.Email, nil
}

// Query returns generated1.QueryResolver implementation.
func (r *Resolver) Query() generated1.QueryResolver { return &queryResolver{r} }

// User returns generated1.UserResolver implementation.
func (r *Resolver) User() generated1.UserResolver { return &userResolver{r} }

type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
